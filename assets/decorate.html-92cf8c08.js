import{_ as t,r as o,o as c,c as p,d as n,e as s,b as e,a as l}from"./app-3d979d38.js";const i={},r=n("h1",{id:"csharp修饰符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#csharp修饰符","aria-hidden":"true"},"#"),s(" csharp修饰符")],-1),u=n("h2",{id:"文档位置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#文档位置","aria-hidden":"true"},"#"),s(" 文档位置")],-1),d={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.runoob.com/csharp/csharp-methods.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cjavapy.com/",target:"_blank",rel:"noopener noreferrer"},v=l(`<h2 id="out修饰符" tabindex="-1"><a class="header-anchor" href="#out修饰符" aria-hidden="true">#</a> out修饰符</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OutFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=</span> <span class="token function">MyTryParse</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
             
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MyTryParse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                result <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Person p = new Teacher();</code> •子类可以隐式的转换成父类. <code>Teacher t=(Teacher)p;</code></p><blockquote><p>is和as</p></blockquote><p>– typeA is type B 仅判断 – typeA as TypeB先判断,再转换 – 如果成功了那就是真的成功了,如果不成功返回空 – as 也是转换,但是 如果转换不了的 不报异常,返回来的是null – is 转换 ,返回的是bool值,true就是能转换,false 就是不能转换</p>`,5);function m(b,_){const a=o("ExternalLinkIcon");return c(),p("div",null,[r,u,n("ul",null,[n("li",null,[n("a",d,[s("https://docs.microsoft.com/zh-cn/dotnet/csharp/"),e(a)])]),n("li",null,[n("a",k,[s("https://www.runoob.com/csharp/csharp-methods.html"),e(a)])]),n("li",null,[n("a",h,[s("https://www.cjavapy.com/"),e(a)])])]),v])}const y=t(i,[["render",m],["__file","decorate.html.vue"]]);export{y as default};
