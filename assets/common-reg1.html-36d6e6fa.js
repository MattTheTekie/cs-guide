import{_ as o,r as c,o as l,c as u,b as t,w as p,a as e,d as n,e as s}from"./app-3d979d38.js";const i={},r=e(`<h1 id="常用正则表达式1" tabindex="-1"><a class="header-anchor" href="#常用正则表达式1" aria-hidden="true">#</a> 常用正则表达式1</h1><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
&quot;^\\\\d+$&quot; //非负整数（正整数 + 0）

&quot;^[0-9]_[1-9][0-9]_$&quot; //正整数

&quot;^((-\\\\d+)|(0+))$&quot; //非正整数（负整数 + 0）

&quot;^-[0-9]_[1-9][0-9]_$&quot; //负整数

&quot;^-?\\\\d+$&quot; //整数

&quot;^\\\\d+(\\\\.\\\\d+)?$&quot; //非负浮点数（正浮点数 + 0）

&quot;^(([0-9]+\\\\.[0-9]_[1-9][0-9]_)|([0-9]_[1-9][0-9]_\\\\.[0-9]+)|([0-9]_[1-9][0-9]_))$&quot; //正浮点数

&quot;^((-\\\\d+(\\\\.\\\\d+)?)|(0+(\\\\.0+)?))$&quot; //非正浮点数（负浮点数 + 0）
&quot;^(-(([0-9]+\\\\.[0-9]_[1-9][0-9]_)|([0-9]_[1-9][0-9]_\\\\.[0-9]+)|([0-9]_[1-9][0-9]_)))$&quot; //负浮点数

&quot;^(-?\\\\d+)(\\\\.\\\\d+)?$&quot; //浮点数

&quot;^[A-Za-z]+$&quot; //由26个英文字母组成的字符串

&quot;^[A-Z]+$&quot; //由26个英文字母的大写组成的字符串

&quot;^[a-z]+$&quot; //由26个英文字母的小写组成的字符串

&quot;^[A-Za-z0-9]+$&quot; //由数字和26个英文字母组成的字符串

&quot;^\\\\w+$&quot; //由数字、26个英文字母或者下划线组成的字符串

&quot;^[\\\\w-]+(\\\\.[\\\\w-]+)*@[\\\\w-]+(\\\\.[\\\\w-]+)+$&quot; //email地址

&quot;^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?$&quot; //url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript正则表达式检验" tabindex="-1"><a class="header-anchor" href="#javascript正则表达式检验" aria-hidden="true">#</a> javascript正则表达式检验</h2><h3 id="校验是否全由数字组成" tabindex="-1"><a class="header-anchor" href="#校验是否全由数字组成" aria-hidden="true">#</a> 校验是否全由数字组成**</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{1,20}</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验登录名-只能输入5-20个以字母开头、可带数字、-、-的字串" tabindex="-1"><a class="header-anchor" href="#校验登录名-只能输入5-20个以字母开头、可带数字、-、-的字串" aria-hidden="true">#</a> 校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串**</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isRegisterUserName</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{1}</span><span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token alternation keyword">|</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>._<span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token quantifier number">{4,19}</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验用户姓名-只能输入1-30个以字母开头的字串" tabindex="-1"><a class="header-anchor" href="#校验用户姓名-只能输入1-30个以字母开头的字串" aria-hidden="true">#</a> 校验用户姓名：只能输入1-30个以字母开头的字串**</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isTrueName</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{1,30}</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验密码-只能输入6-20个字母、数字、下划线" tabindex="-1"><a class="header-anchor" href="#校验密码-只能输入6-20个字母、数字、下划线" aria-hidden="true">#</a> 校验密码：只能输入6-20个字母、数字、下划线**</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPasswd</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\w</span><span class="token group punctuation">)</span><span class="token quantifier number">{6,20}</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验普通电话、传真号码-可以-开头-除数字外-可含有" tabindex="-1"><a class="header-anchor" href="#校验普通电话、传真号码-可以-开头-除数字外-可含有" aria-hidden="true">#</a> 校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”**</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isTel</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//let patrn=/^[+]{0,1}(\\d){1,3}[ ]?([-]?(\\d){1,12})+$/;</span>
<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>+<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{0,1}</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token group punctuation">)</span><span class="token quantifier number">{1,3}</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span> <span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">?</span><span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>-<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">?</span><span class="token group punctuation">(</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token group punctuation">)</span><span class="token alternation keyword">|</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span> <span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token quantifier number">{1,12}</span><span class="token group punctuation">)</span><span class="token quantifier number">+</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//校验手机号码：必须以数字开头，除数字外，可含有“-”</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isMobil</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>+<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{0,1}</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token group punctuation">)</span><span class="token quantifier number">{1,3}</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span> <span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">?</span><span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>-<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">?</span><span class="token group punctuation">(</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token group punctuation">)</span><span class="token alternation keyword">|</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span> <span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token quantifier number">{1,12}</span><span class="token group punctuation">)</span><span class="token quantifier number">+</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>                                                                                           |
</code></pre><h2 id="正则表达式验证控制文本框的输入字符类型" tabindex="-1"><a class="header-anchor" href="#正则表达式验证控制文本框的输入字符类型" aria-hidden="true">#</a> 正则表达式验证控制文本框的输入字符类型</h2><p>对于form表单也可以使用原生的<code>pattern</code>属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>country_code<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>[a-zA-Z0-9]|[._]){4,19}<span class="token punctuation">&#39;</span></span>  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Three letter country code<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1.只能输入数字和英文的：</strong></p>`,20),k=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onkeyup"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[s("value"),n("span",{class:"token operator"},"="),s("value"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"replace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},[n("span",{class:"token char-class"},[n("span",{class:"token char-class-punctuation punctuation"},"["),n("span",{class:"token char-set class-name"},"\\W"),n("span",{class:"token char-class-punctuation punctuation"},"]")])]),n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-flags"},"g")]),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),s()]),n("span",{class:"token punctuation"},'"')])]),s(),n("span",{class:"token attr-name"},"onbeforepaste"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"ID"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text1"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"NAME"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text1"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),d=n("p",null,[n("strong",null,"2.只能输入数字的：")],-1),v=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onkeyup"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[s("value"),n("span",{class:"token operator"},"="),s("value"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"replace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},[n("span",{class:"token char-class"},[n("span",{class:"token char-class-punctuation punctuation"},"["),n("span",{class:"token char-class-negation operator"},"^"),n("span",{class:"token char-set class-name"},"\\d"),n("span",{class:"token char-class-punctuation punctuation"},"]")])]),n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-flags"},"g")]),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),s()]),n("span",{class:"token punctuation"},'"')])]),s(),n("span",{class:"token attr-name"},"onbeforepaste"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"ID"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text2"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"NAME"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text2"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),m=n("p",null,[n("strong",null,"3.只能输入全角的：")],-1),b=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onkeyup"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[s("value"),n("span",{class:"token operator"},"="),s("value"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"replace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},[n("span",{class:"token char-class"},[n("span",{class:"token char-class-punctuation punctuation"},"["),n("span",{class:"token char-class-negation operator"},"^"),n("span",{class:"token range"},[n("span",{class:"token escape"},"\\uFF00"),n("span",{class:"token range-punctuation operator"},"-"),n("span",{class:"token escape"},"\\uFFFF")]),n("span",{class:"token char-class-punctuation punctuation"},"]")])]),n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-flags"},"g")]),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")")]),n("span",{class:"token punctuation"},'"')])]),s(),n("span",{class:"token attr-name"},"onbeforepaste"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\uFF00-\\uFFFF]/g,''))"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"ID"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text3"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"NAME"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text3"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),g=n("p",null,[n("strong",null,"4.只能输入汉字的：")],-1),h=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onkeyup"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[s("value"),n("span",{class:"token operator"},"="),s("value"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"replace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},[n("span",{class:"token char-class"},[n("span",{class:"token char-class-punctuation punctuation"},"["),n("span",{class:"token char-class-negation operator"},"^"),n("span",{class:"token range"},[n("span",{class:"token escape"},"\\u4E00"),n("span",{class:"token range-punctuation operator"},"-"),n("span",{class:"token escape"},"\\u9FA5")]),n("span",{class:"token char-class-punctuation punctuation"},"]")])]),n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-flags"},"g")]),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")")]),n("span",{class:"token punctuation"},'"')])]),s(),n("span",{class:"token attr-name"},"onbeforepaste"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\u4E00-\\u9FA5]/g,''))"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"ID"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text4"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"NAME"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Text4"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f=e(`<h2 id="javascript-测试正则" tabindex="-1"><a class="header-anchor" href="#javascript-测试正则" aria-hidden="true">#</a> javascript 测试正则</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">regx</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> r <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> patrn<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>校验字符串 ：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>str<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>匹配<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">regx</span><span class="token punctuation">(</span>regxStr<span class="token punctuation">.</span>value<span class="token punctuation">,</span>str<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验邮政编码" tabindex="-1"><a class="header-anchor" href="#校验邮政编码" aria-hidden="true">#</a> 校验邮政编码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPostalCode</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//let patrn=/^[a-zA-Z0-9]{3,12}$/;</span>
<span class="token keyword">let</span> patrn<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span> <span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{3,12}</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="校验搜索关键字" tabindex="-1"><a class="header-anchor" href="#校验搜索关键字" aria-hidden="true">#</a> 校验搜索关键字</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isSearch</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> patrn <span class="token operator">=</span>
    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span>\`~!@#$%^&amp;*()+=|<span class="token special-escape escape">\\\\</span><span class="token special-escape escape">\\]</span>[<span class="token special-escape escape">\\]</span><span class="token special-escape escape">\\{</span><span class="token special-escape escape">\\}</span>:;<span class="token escape">\\&#39;</span><span class="token escape">\\,</span>.&lt;&gt;/?<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{1}</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span>\`~!@$%^&amp;()+=|<span class="token special-escape escape">\\\\</span><span class="token special-escape escape">\\]</span>[<span class="token special-escape escape">\\]</span><span class="token special-escape escape">\\{</span><span class="token special-escape escape">\\}</span>:;<span class="token escape">\\&#39;</span><span class="token escape">\\,</span>.&lt;&gt;?<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{0,19}</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isIP</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//by zergling</span>
  <span class="token keyword">let</span> patrn <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>.<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{1,20}</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patrn<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * FUNCTION: isBetween
 * PARAMETERS: val AS any value
 * lo AS Lower limit to check
 * hi AS Higher limit to check
 * CALLS: NOTHING
 * RETURNS: TRUE if val is between lo and hi both inclusive, otherwise false.
 ***/</span>
<span class="token keyword">function</span> <span class="token function">isBetween</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> lo <span class="token operator">||</span> val <span class="token operator">&gt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * FUNCTION: isDate checks a valid date
 * PARAMETERS: theStr AS String
 * CALLS: isBetween, isInt
 * RETURNS: TRUE if theStr is a valid date otherwise false.
 ***/</span>
<span class="token keyword">function</span> <span class="token function">isDate</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> the1st <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> the2nd <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>the1st <span class="token operator">==</span> the2nd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> the1st<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> m <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> the2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> d <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> theStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> maxDays <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isBetween</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> maxDays <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> maxDays<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * FUNCTION: isEuDate checks a valid date in British format
 * PARAMETERS: theStr AS String
 * CALLS: isBetween, isInt
 * RETURNS: TRUE if theStr is a valid date otherwise false.
 ***/</span>
<span class="token keyword">function</span> <span class="token function">isEuDate</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>theStr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> the1st <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> the2nd <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>the1st <span class="token operator">==</span> the2nd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> m <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> the2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> d <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> the1st<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> y <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>the2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> theStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> maxDays <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">isInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> maxDays <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> maxDays <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBetween</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> maxDays<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
 * FUNCTION: Compare Date! Which is the latest!
 * PARAMETERS: lessDate,moreDate AS String
 * CALLS: isDate,isBetween
 * RETURNS: TRUE if lessDate&lt;moreDate
 **/</span>
<span class="token keyword">function</span> <span class="token function">isComdate</span><span class="token punctuation">(</span><span class="token parameter">lessDate<span class="token punctuation">,</span> moreDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDate</span><span class="token punctuation">(</span>lessDate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDate</span><span class="token punctuation">(</span>moreDate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> less1st <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> less2nd <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> more1st <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> more2nd <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> lessy <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> less1st<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> lessm <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>less1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> less2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> lessd <span class="token operator">=</span> lessDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>less2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lessDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> morey <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> more1st<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> morem <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>more1st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more2nd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mored <span class="token operator">=</span> moreDate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>more2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> moreDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> Date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lessy<span class="token punctuation">,</span> lessm<span class="token punctuation">,</span> lessd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> Date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>morey<span class="token punctuation">,</span> morem<span class="token punctuation">,</span> mored<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Date1 <span class="token operator">&gt;</span> Date2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * FUNCTION isEmpty checks if the parameter is empty or null
 * PARAMETER str AS String
 ***/</span>
<span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * FUNCTION: isInt
 * PARAMETER: theStr AS String
 * RETURNS: TRUE if the passed parameter is an integer, otherwise FALSE
 * CALLS: isDigit
 ***/</span>
<span class="token keyword">function</span> <span class="token function">isInt</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>theStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> theStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDigit</span><span class="token punctuation">(</span>theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
* FUNCTION: isReal
* PARAMETER: heStr AS String 
decLen AS Integer (how many digits after period)
* RETURNS: TRUE if theStr is a float, otherwise FALSE
* CALLS: isInt
***/</span>
<span class="token keyword">function</span> <span class="token function">isReal</span><span class="token punctuation">(</span><span class="token parameter">theStr<span class="token punctuation">,</span> decLen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dot1st <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dot2nd <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token constant">OK</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>theStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dot1st <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>theStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dot1st <span class="token operator">!=</span> dot2nd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dot1st <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> intPart <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dot1st<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> decPart <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>dot2nd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>decPart<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> decLen<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>intPart<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>decPart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>decPart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * FUNCTION: isEmail
 * PARAMETER: String (Email Address)
 * RETURNS: TRUE if the String is a valid Email address
 * FALSE if the passed string is not a valid Email Address
 * EMAIL FORMAT: AnyName@EmailServer e.g; webmaster@hotmail.com
 * @ sign can appear only once in the email address.
 **/</span>
<span class="token keyword">function</span> <span class="token function">isEmail</span><span class="token punctuation">(</span><span class="token parameter">theStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> atIndex <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dotIndex <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> atIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  theSub <span class="token operator">=</span> theStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    atIndex <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span>
    atIndex <span class="token operator">!=</span> theStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    dotIndex <span class="token operator">&lt;</span> atIndex <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">||</span>
    theStr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> theSub<span class="token punctuation">.</span>length
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
* FUNCTION: newWindow
* PARAMETERS: doc -&gt; Document to open in the new window
hite -&gt; Height of the new window
wide -&gt; Width of the new window
bars -&gt; 1-Scroll bars = YES 0-Scroll Bars = NO
resize -&gt; 1-Resizable = YES 0-Resizable = NO
* CALLS: NONE
* RETURNS: New window instance
***/</span>
<span class="token keyword">function</span> <span class="token function">newWindow</span><span class="token punctuation">(</span><span class="token parameter">doc<span class="token punctuation">,</span> hite<span class="token punctuation">,</span> wide<span class="token punctuation">,</span> bars<span class="token punctuation">,</span> resize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> winNew <span class="token operator">=</span> <span class="token string">&quot;_blank&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> opt <span class="token operator">=</span> <span class="token string">&quot;toolbar=0,location=0,directories=0,status=0,menubar=0,&quot;</span><span class="token punctuation">;</span>
  opt <span class="token operator">+=</span> <span class="token string">&quot;scrollbars=&quot;</span> <span class="token operator">+</span> bars <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  opt <span class="token operator">+=</span> <span class="token string">&quot;resizable=&quot;</span> <span class="token operator">+</span> resize <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  opt <span class="token operator">+=</span> <span class="token string">&quot;width=&quot;</span> <span class="token operator">+</span> wide <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  opt <span class="token operator">+=</span> <span class="token string">&quot;height=&quot;</span> <span class="token operator">+</span> hite<span class="token punctuation">;</span>
  winHandle <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> winNew<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * FUNCTION: DecimalFormat
 * PARAMETERS: paramValue -&gt; Field value
 * CALLS: NONE
 * RETURNS: Formated string
 ***/</span>
<span class="token keyword">function</span> <span class="token function">DecimalFormat</span><span class="token punctuation">(</span><span class="token parameter">paramValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> intPart <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>paramValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> decPart <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>paramValue<span class="token punctuation">)</span> <span class="token operator">-</span> intPart<span class="token punctuation">;</span>
  str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>decPart <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> decPart <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> str <span class="token operator">+=</span> intPart <span class="token operator">+</span> <span class="token string">&quot;.00&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> str <span class="token operator">+=</span> intPart <span class="token operator">+</span> decPart<span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function y(w,x){const a=c("CodeDemo");return l(),u("div",null,[r,t(a,{id:"code-demo-42",type:"normal",code:"eJyrVsooyc1RslKyycwrKC1RyM/LTq0sLbCNUSpLzClNtQWTekWpBTmJyaka+tExMeGx+uk66uqaCjFKQNVJqWn5QNnE4pJUoJ7knMyCpPzEohSXxJJEveLUEhCtoV6SWlGiroMqmY4iqYlkRVxMTArUDk2gHZ4uQINDgIoMgRw/R19XBNcuJk+pFgCnXkEC"},{default:p(()=>[k]),_:1}),d,t(a,{id:"code-demo-48",type:"normal",code:"eJyrVsooyc1RslKyycwrKC1RyM/LTq0sLbCNUSpLzClNtQWTekWpBTmJyaka+tFxMTEpsfrpOurqmgoxSkDlSalp+UDpxOKSVKCm5JzMgqT8xKIUl8SSRL3i1BIQraFeklpRoq6DKpmOIqmJ3Q5NoB2eLkCDQ4CKjIAcP0dfVwTXLiZPqRYA9h1Bbw=="},{default:p(()=>[v]),_:1}),m,t(a,{id:"code-demo-54",type:"normal",code:"eJyrVsooyc1RslKyycwrKC1RyM/LTq0sLbCNUSpLzClNtQWTekWpBTmJyaka+tFxMTGlbm4GBrpg2s0tVj9dR11dM0YJqDMpNS0fqDKxuCQVqD85J7MgKT+xKMUlsSRRrzi1BERrqJekVpSo66BKpqNIahK2DmSfpwvQkhCgBmMgx8/R1xXBtYvJU6oFAANmSC8="},{default:p(()=>[b]),_:1}),g,t(a,{id:"code-demo-60",type:"normal",code:"eJyrVsooyc1RslKyycwrKC1RyM/LTq0sLbCNUSpLzClNtQWTekWpBTmJyaka+tFxMTGlJq4GBrpA2tLN0TRWP11HXV0zRgmoMyk1LR+oMrG4JBWoPzknsyApP7EoxSWxJFGvOLUERGuol6RWlKjroEqmo0hqErYOZJ+nC9CSEKAGEyDHz9HXFcG1i8lTqgUA14RHxQ=="},{default:p(()=>[h]),_:1}),f])}const S=o(i,[["render",y],["__file","common-reg1.html.vue"]]);export{S as default};
